apiVersion: v1
kind: ConfigMap
metadata:
  name: helm-shell-script
data:
  helm.sh: |
    #!/bin/sh

    set -e

    # $1 - Reliza Instance API Id
    # $2 - Reliza Instance API Key
    # $3 - Project Id of Helm Chart Project on Reliza Hub
    # $4 - Name/path of values file to use, relative to the base of the helm chart
    # $5 - Helm release name
    # $6 - Namespace to install release
    # $7 - Helm repo login
    # $8 - Helm repo pass
    # $9 - Reliza Hub URI, defaults to https://app.relizahub.com
    
    if [ "$#" -lt 8 ]
    then
      echo "Usage: reliza_instance_api_id reliza_instance_api_id helm_chart_project_id name_path_of_values_file helm_release_name namespace helm_repo_login helm_repo_pass"
      exit 1
    fi

    relizaHubUri=https://app.relizahub.com
    if [ ! -z "$9" ]
    then
      relizaHubUri=$9
    fi
    
    mkdir -p work-values
    
    
    # Obtain latest approved version of helm chart
    reliza_hub_latestrelease=$(reliza-cli getlatestrelease -u $relizaHubUri -i $1 -k $2 --project $3)
    echo "debug latestrelease = $reliza_hub_latestrelease"
    helm_chart_version=$(echo $reliza_hub_latestrelease | jq -r ".version")
    helm_chart_identifier=$(echo $reliza_hub_latestrelease | jq -r ".artifactDetails[0].identifier")
    echo "debug identifier = $helm_chart_identifier"
    helm_chart_name=$(echo $helm_chart_identifier | awk -F "/" '{print $NF}')
    helm_chart_uri=$(echo $helm_chart_identifier | awk -F "/$helm_chart_name" '{print $1}')
    echo "debug helm chart uri = $helm_chart_uri"
    echo "username = $7"

    # use special oci commands if we are dealing with oci repo - currently coding azurecr
    use_oci=false
    case "$helm_chart_uri" in 
      *azurecr.io*) use_oci=true ;;
      *.ecr.*) use_oci=true ;;
      *       ) use_oci=false ;;
    esac
    echo "debug use_oci = $use_oci"
    if [ "$use_oci" = "false" ]
    then
      helm repo add repo $helm_chart_uri --username $7 --password $8
      helm repo update
    else
      export HELM_EXPERIMENTAL_OCI=1
      helm registry login $helm_chart_uri --username $7 --password $8
    fi
    
    # compare version with the one recorded in work-values if any
    last_version=$(cat work-values/last_version || echo "none")
    
    # proceed with chart pull if the version is new
    if [ "$helm_chart_version" != "$last_version" ]
    then
      rm -rf work-values/$helm_chart_name*
      if [ "$use_oci" = "false" ]
      then
        helm pull repo/$helm_chart_name --version $helm_chart_version -d work-values/
      else
        helm pull oci://$helm_chart_identifier --version $helm_chart_version -d work-values/
      fi
      cd work-values && tar -xzvf *.tgz && cd ..
      # helm pull repo/$helm_chart_name --version $helm_chart_version --untar --untardir work-values/
      # save version for future use
      echo $helm_chart_version > work-values/last_version
      # stream helm chart version to Reliza Hub
      reliza-cli instdata -u $relizaHubUri -i $1 -k $2 --images "$sha256digest" --namespace $6 --sender helmsender$6
    fi

    cp work-values/values-diff.yaml work-values/values-prev-diff.yaml || echo "no prev values file present yet" > work-values/values-prev-diff.yaml

    # Override base values
    if [ "$4" != "values.yaml" ]
    then
      reliza-cli helmvalues work-values/$helm_chart_name -f $4 > work-values/work-values.yaml
    else 
      cp work-values/$helm_chart_name/values.yaml work-values/work-values.yaml
    fi

    reliza-cli replacetags -u $relizaHubUri -i $1 -k $2 --infile work-values/work-values.yaml --outfile work-values/values-diff.yaml --fordiff=true --resolveprops=true --namespace $6

    values_diff=$(diff work-values/values-diff.yaml work-values/values-prev-diff.yaml | wc -l)

    # check if release already deployed to figure out whether we do install or upgrade
    helm_command="upgrade"
    cur_releases=$(helm list -f "^$5$" -n $6 | wc -l)
    if [ $cur_releases -lt 2 ]
    then
      helm_command="install"
    fi

    if [ $values_diff -gt 0 ] || [ "install" == "$helm_command" ] || [ "$helm_chart_version" != "$last_version" ]
    then
      echo "Update required, performing..."
      # compute sha256sum for the helm chart
      sha256digest="sha256:$(sha256sum work-values/*.tgz | cut -f 1 -d ' ')"
      # set desired app version
      appVersion=$(reliza-cli exportinst -u $relizaHubUri -i $1 -k $2 --namespace $6 | jq -r '.components[] | select(.type | contains("application")) | .version')
      if [ ! -z "$appVersion" ] && [ "null" != "$appVersion" ]
      then
        sed -i "s/^appVersion:.*$/appVersion: $appVersion/" work-values/$helm_chart_name/Chart.yaml
      fi
      # execute helm
      reliza-cli replacetags -u $relizaHubUri -i $1 -k $2 --infile work-values/work-values.yaml --outfile work-values/values.yaml --resolveprops=true --namespace $6
      helm $helm_command $5 -n $6 -f work-values/values.yaml work-values/$helm_chart_name
    else
      echo "No diff in values, no upgrade will be performed"
    fi